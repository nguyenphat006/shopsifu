---
description: 
globs: 
alwaysApply: false
---
# Module Development Rules

## Module Structure

When implementing a new module, follow this standardized structure:

### Page Component
- Location: `/app/(routes)/module-name/page.tsx`
- Purpose: Entry point for the module
- Basic structure:
  ```typescript
  'use client'
  import { ModuleTable } from "@/components/admin/module-name/module-Table";

  export default function ModulePage() {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">[Module Title]</h2>
          <p className="text-muted-foreground">
            [Brief module description]
          </p>
        </div>
        <ModuleTable />
      </div>
    )
  }
  ```

### Module Components
Each module should include these standard files:

1. **`module-Columns.tsx`**
   - Purpose: Define data table columns configuration
   - Contains column definitions, formatters, and actions

2. **`module-ModalUpSert.tsx`**
   - Purpose: Modal UI for Create/Edit operations
   - Handles form validation and submission

3. **`module-Table.tsx`**
   - Purpose: Main data table component
   - Integrates reusable `data-table` component
   - Includes pagination and search functionality
   - Example structure:
     ```typescript
     'use client'
     import { DataTable } from "@/components/ui/data-table/data-table"
     import { Pagination } from "@/components/ui/data-table/pagination"
     import { SearchInput } from "@/components/ui/data-table/search-input"
     import { columns } from "./module-Columns"
     import { useModule } from "./useModule"
     
     export function ModuleTable() {
       const { data, isLoading, pagination, search } = useModule()
       
       return (
         <div className="space-y-4">
           <SearchInput placeholder="Search..." onChange={search.onChange} />
           <DataTable columns={columns} data={data} isLoading={isLoading} />
           <Pagination 
             totalPages={pagination.totalPages} 
             currentPage={pagination.currentPage}
             onPageChange={pagination.onPageChange} 
           />
         </div>
       )
     }
     ```

4. **`module-MockData.tsx`** (optional)
   - Purpose: Define sample data for development
   - Used before API integration is complete

5. **`useModule.tsx`**
   - Purpose: Custom hook for module logic
   - Handles API calls via service layer
   - Manages state, pagination, search, and CRUD operations

## Reusable UI Components

Leverage these shared UI components for consistent implementation:

1. **`data-table.tsx`**
   - Core table component with standard features
   
2. **`data-table-column-header.tsx`**
   - For sortable column headers

3. **`data-table-row-actions.tsx`**
   - Standard row action buttons (edit/delete)

4. **`pagination.tsx`**
   - Standardized pagination controls

5. **`search-input.tsx`**
   - Search input component with standard behavior

## Implementation Guidelines

1. Always use the standardized module structure
2. Keep page components simple, delegating logic to custom hooks
3. Use the shared UI components for consistency
4. Implement module-specific logic in the `useModule` hook
5. Connect to services for API operations
6. Define proper interfaces for all data structures
7. Follow naming conventions consistently


This structure ensures maintainable, consistent module implementations across the application.