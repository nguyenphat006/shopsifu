name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: "Commit SHA ho·∫∑c tag ƒë·ªÉ rollback (ƒë·ªÉ tr·ªëng ƒë·ªÉ deploy b√¨nh th∆∞·ªùng)"
        required: false

jobs:
  # 1. Build & Test
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      # - name: Run tests
      #   run: npm test

  # 2. Deploy to Production
  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.manual_rollback) }}
    environment: staging
    env:
      NODE_ENV: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Deploy via SSH & PM2
        id: ssh_deploy
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            source ~/.bashrc; source ~/.profile
            # C√†i ƒë·∫∑t jq n·∫øu ch∆∞a c√≥
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master && git reset --hard origin/master
            rm -rf .next node_modules
            npm ci && npm run build
            pm2 describe client-shopsifu &>/dev/null && pm2 restart client-shopsifu || pm2 start dist/main.js --name client-shopsifu
            # Th√™m ƒë·ªô tr·ªÖ ƒë·ªÉ ·ª©ng d·ª•ng ghi log v√† PM2 c·∫≠p nh·∫≠t tr·∫°ng th√°i
            sleep 12
            # L·∫•y tr·∫°ng th√°i PM2 d∆∞·ªõi d·∫°ng JSON
            pm2 jlist > /tmp/pm2_status.json
            # L·∫•y log
            pm2 logs client-shopsifu --lines 100 --nostream > /tmp/pm2_logs.txt
            STATUS=$(pm2 info client-shopsifu | grep status | awk '{print $4}')
            echo "$STATUS" > /tmp/app_status.txt
            if [[ "$STATUS" != "online" ]]; then
              exit 2
            fi
          EOF
        continue-on-error: true

      - name: Collect PM2 Output
        if: always()
        id: pm2_logs
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ pm2 jlist
            PM2_INFO=$(jq -r '.[] | select(.name == "client-shopsifu") | "Name: \(.name)\nStatus: \(.pm2_env.status)\nPID: \(.pid)\nUptime: \(.pm2_env.uptime // 0 | tostring + \"ms\")\nCPU: \(.monit.cpu)%\nMemory: \(.monit.memory / 1024 / 1024 | tostring + \"MB\")"' /tmp/pm2_status.json 2>/dev/null)
            if [ -z "$PM2_INFO" ]; then
              PM2_INFO="Kh√¥ng t√¨m th·∫•y process client-shopsifu ho·∫∑c kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i PM2"
            fi
            echo "::set-output name=pm2_info::$PM2_INFO"
            # L·∫•y log, l·ªçc b·ªè d√≤ng h·ªá th·ªëng
            if [ -f /tmp/pm2_logs.txt ]; then
              PM2_LOGS=$(grep -v '\[TAILING\]' /tmp/pm2_logs.txt | tail -n 100)
              if [ -z "$PM2_LOGS" ]; then
                PM2_LOGS="Kh√¥ng c√≥ log ·ª©ng d·ª•ng ho·∫∑c log r·ªóng"
              fi
            else
              PM2_LOGS="Kh√¥ng c√≥ log ·ª©ng d·ª•ng ho·∫∑c file log kh√¥ng t·ªìn t·∫°i"
            fi
            echo "::set-output name=pm2_logs::$PM2_LOGS"
          EOF

      - name: Tag Release
        if: success()
        run: |
          TAG=v$(date +'%Y.%m.%d.%H%M%S')
          git tag $TAG
          git push origin $TAG

      - name: Get Commit Info
        id: commit_info
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Discord Embed Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          PM2_INFO: ${{ steps.pm2_logs.outputs.pm2_info }}
          PM2_LOGS: ${{ steps.pm2_logs.outputs.pm2_logs }}
          COMMIT_SHA: ${{ steps.commit_info.outputs.commit_sha }}
          COMMIT_MESSAGE: ${{ steps.commit_info.outputs.commit_message }}
        run: |
          # Ki·ªÉm tra DISCORD_WEBHOOK
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "L·ªói: DISCORD_WEBHOOK kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t"
            exit 1
          else
            echo "DISCORD_WEBHOOK ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t"
          fi

          # C√†i ƒë·∫∑t jq ƒë·ªÉ x·ª≠ l√Ω JSON
          sudo apt-get update && sudo apt-get install -y jq

          COLOR=3066993
          ICON="‚úÖ"
          if [ "$STATUS" != "success" ]; then
            COLOR=15158332
            ICON="‚ùå"
          fi

          # Tho√°t PM2_LOGS v√† PM2_INFO an to√†n b·∫±ng jq
          ESCAPED_LOGS=$(echo "${PM2_LOGS:0:1500}" | jq -s -R .)
          ESCAPED_PM2_INFO=$(echo "$PM2_INFO" | jq -s -R .)
          ESCAPED_COMMIT_MESSAGE="$COMMIT_MESSAGE"

          # T·∫°o JSON payload b·∫±ng jq ƒë·ªÉ ƒë·∫£m b·∫£o c√∫ ph√°p ƒë√∫ng
          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg branch "$BRANCH" \
            --arg commit "$COMMIT" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg commit_message "$ESCAPED_COMMIT_MESSAGE" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg pm2_info "$ESCAPED_PM2_INFO" \
            --arg logs "$ESCAPED_LOGS" \
            --arg run_id "$RUN_ID" \
            --arg color "$COLOR" \
            '{
              embeds: [{
                title: "üöÄ CLIENT - Th√¥ng b√°o tri·ªÉn khai",
                color: ($color | tonumber),
                fields: [
                  { name: "Tr·∫°ng th√°i", value: "\($icon) \($status)", inline: true },
                  { name: "Nh√°nh", value: "`\($branch)`", inline: true },
                  { name: "Commit", value: "[`\($commit)`](https://github.com/\($repo)/commit/\($commit))", inline: false },
                  { name: "Commit SHA", value: "`\($commit_sha)`", inline: false },
                  { name: "Commit Message", value: $commit_message, inline: false },
                  { name: "Ng∆∞·ªùi th·ª±c hi·ªán", value: "`\($actor)`", inline: true },
                  { name: "Tr·∫°ng th√°i PM2", value: "```\n\($pm2_info)\n```", inline: false }
                ],
                description: "**100 d√≤ng log cu·ªëi:**\n```\n\($logs)\n```",
                url: "https://github.com/\($repo)/actions/runs/\($run_id)"
              }]
            }')

          # Ghi log payload ƒë·ªÉ ki·ªÉm tra
          echo "JSON Payload: $JSON_PAYLOAD"

          # G·ª≠i y√™u c·∫ßu v√† ghi l·∫°i ph·∫£n h·ªìi
          RESPONSE=$(curl -s -w "%{http_code}" -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK")
          HTTP_CODE=${RESPONSE: -3}
          RESPONSE_BODY=${RESPONSE%???}

          echo "M√£ tr·∫°ng th√°i HTTP: $HTTP_CODE"
          echo "N·ªôi dung ph·∫£n h·ªìi: $RESPONSE_BODY"

          if [ "$HTTP_CODE" != "204" ]; then
            echo "L·ªói: Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Discord"
            exit 1
          fi

  # 3. Automatic Rollback on Failure
  rollback-auto:
    name: Automatic Rollback
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'failure'
    steps:
      - name: Rollback to previous commit on server
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            source ~/.bashrc; source ~/.profile
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master
            git reset --hard HEAD~1
            rm -rf dist node_modules
            npm ci && npm run build
            pm2 restart client-shopsifu
          EOF

  # 4. Manual Rollback
  manual-rollback:
    name: Manual Rollback
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.manual_rollback
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific commit/tag
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.manual_rollback }}

      - name: Re-deploy to VPS
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            source ~/.bashrc; source ~/.profile
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git reset --hard HEAD
            rm -rf dist node_modules
            npm ci && npm run build
            pm2 restart client-shopsifu
          EOF

permissions:
  contents: write