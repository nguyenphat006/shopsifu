'use client';

import { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { Button } from '@/components/ui/button';
import { CustomerInfo } from './customer-Info';
import { ShippingAddress } from './shipping-Address';
import { useCheckout } from '../hooks/useCheckout';
import { CustomerFormData, Address, ShippingAddress as ShippingAddressType } from '@/types/checkout.interface';
import { toast } from 'sonner';
import { setCommonInfo } from '@/store/features/checkout/ordersSilde';

interface InformationTabsProps {
  onNext: () => void;
}

export function InformationTabs({ onNext }: InformationTabsProps) {
  const dispatch = useDispatch();
  const { updateReceiverInfo, updateShippingAddress, updateShippingMethod } = useCheckout();

  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null);
  
  // Th√™m state l∆∞u tr·ªØ th√¥ng tin nh·∫≠p m·ªõi t·∫°m th·ªùi
  const [tempNewAddressData, setTempNewAddressData] = useState({
    province: '',
    district: '',
    ward: '',
    address: ''
  });
  
  const [formData, setFormData] = useState<CustomerFormData>({
    // Customer Info
    fullName: '',
    phoneNumber: '',
    email: '',
    saveInfo: false,
    // Shipping Info
    receiverName: '',
    receiverPhone: '',
    province: '',
    district: '',
    ward: '',
    address: '',
    note: '',
    deliveryMethod: 'standard'
  });

  // Theo d√µi thay ƒë·ªïi c·ªßa selectedAddress
  useEffect(() => {
    if (!selectedAddress) {
      // N·∫øu chuy·ªÉn sang ch·∫ø ƒë·ªô nh·∫≠p m·ªõi, kh√¥i ph·ª•c d·ªØ li·ªáu nh·∫≠p tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
      if (tempNewAddressData.province || tempNewAddressData.district || tempNewAddressData.ward || tempNewAddressData.address) {
        setFormData(prev => ({
          ...prev,
          province: tempNewAddressData.province,
          district: tempNewAddressData.district,
          ward: tempNewAddressData.ward,
          address: tempNewAddressData.address
        }));
      }
    }
  }, [selectedAddress, tempNewAddressData]);

  // X·ª≠ l√Ω nh·∫≠n d·ªØ li·ªáu t·ª´ CustomerInfo
  const handleCustomerInfoChange = (customerData: {
    fullName: string;
    phoneNumber: string;
    email: string;
    saveInfo: boolean;
  }) => {
    setFormData(prev => ({
      ...prev,
      ...customerData
    }));
  };

  const handleChange = (nameOrEvent: string | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, value?: string) => {
    let name: string, val: string;

    if (typeof nameOrEvent === 'string') {
      name = nameOrEvent;
      val = value || '';
    } else {
      name = nameOrEvent.target.name;
      val = nameOrEvent.target.value;
    }

    setFormData(prev => ({ ...prev, [name]: val }));
    
    // Only reset selected address if user manually changes address fields (not programmatic changes)
    if (['province', 'district', 'ward', 'address'].includes(name) && selectedAddress?.id) {
      setSelectedAddress(null);
    }
  };

  const handleRadioChange = (value: string) => {
    setFormData(prev => ({ ...prev, deliveryMethod: value }));
  };

  const handleSelectExistingAddress = (address: Address) => {
    // Prevent unnecessary updates
    const currentAddressString = JSON.stringify(selectedAddress);
    const newAddressString = JSON.stringify(address);
    
    if (currentAddressString === newAddressString) {
      return;
    }
    
    // Ki·ªÉm tra xem ƒë·ªãa ch·ªâ n√†y c√≥ id kh√¥ng (ƒë·ªÉ bi·∫øt l√† ƒë·ªãa ch·ªâ c√≥ s·∫µn hay ƒë·ªãa ch·ªâ m·ªõi)
    const isExistingAddress = address.id && address.id.length > 0;
    
    // ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† string kh√¥ng ph·∫£i undefined
    const safeAddressDetail = address.addressDetail || '';
    const safeProvince = address.province || '';
    const safeDistrict = address.district || '';
    const safeWard = address.ward || '';

    if (!isExistingAddress) {
      // N·∫øu chuy·ªÉn sang ch·∫ø ƒë·ªô nh·∫≠p m·ªõi, l∆∞u l·∫°i th√¥ng tin nh·∫≠p tr∆∞·ªõc ƒë√≥
      setTempNewAddressData({
        province: formData.province,
        district: formData.district,
        ward: formData.ward,
        address: formData.address
      });
    }

    // Update selectedAddress first
    setSelectedAddress(isExistingAddress ? address : null);

    // Then batch the form data update
    setFormData(prev => ({
      ...prev,
      receiverName: address.receiverName || prev.receiverName,
      receiverPhone: address.receiverPhone || prev.receiverPhone,
      province: isExistingAddress ? safeProvince : '',
      district: isExistingAddress ? safeDistrict : '',
      ward: isExistingAddress ? safeWard : '',
      address: isExistingAddress ? safeAddressDetail : ''
    }));
  };

  const handleSubmit = () => {
    // Validation cho c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    const errors: string[] = [];
    
    // 1. Validation t√™n ng∆∞·ªùi nh·∫≠n
    const receiverName = formData.receiverName || formData.fullName;
    if (!receiverName || receiverName.trim() === '') {
      errors.push('Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n');
    }
    
    // 2. Validation s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n
    const receiverPhone = formData.receiverPhone || formData.phoneNumber;
    if (!receiverPhone || receiverPhone.trim() === '') {
      errors.push('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n');
    } else if (!/^[0-9]{10,11}$/.test(receiverPhone.replace(/\s/g, ''))) {
      errors.push('S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá (10-11 s·ªë)');
    }
    
    // 3. Validation ƒë·ªãa ch·ªâ - less strict for debugging
    
    if (selectedAddress) {
      // N·∫øu ch·ªçn ƒë·ªãa ch·ªâ c√≥ s·∫µn, ki·ªÉm tra ƒë·ªãa ch·ªâ c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng
      if (!selectedAddress.addressDetail) {
        // Don't block submission for debugging
      }
    } else {
      // N·∫øu nh·∫≠p ƒë·ªãa ch·ªâ m·ªõi, ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      if (!formData.address || formData.address.trim() === '') {
        errors.push('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt');
      }
      // For debugging, don't block on these fields
      if (!formData.province) {
        // errors.push('Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë');
      }
      if (!formData.district) {
        // errors.push('Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán');
      }
      if (!formData.ward) {
        // errors.push('Vui l√≤ng ch·ªçn ph∆∞·ªùng/x√£');
      }
    }
    
    // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã v√† d·ª´ng l·∫°i
    if (errors.length > 0) {
      toast.error(errors[0]); // Hi·ªÉn th·ªã l·ªói ƒë·∫ßu ti√™n
      return;
    }
    
    // Helper function ƒë·ªÉ parse location data t·ª´ format "code|name"
    const parseLocationValue = (value: string) => {
      if (!value) return '';
      const parts = value.split('|');
      return parts[1] || parts[0]; // ∆Øu ti√™n name, fallback v·ªÅ code
    };

    // Helper function ƒë·ªÉ l·∫•y ID t·ª´ format "code|name"
    const parseLocationId = (value: string) => {
      if (!value) return null;
      const parts = value.split('|');
      return parseInt(parts[0]) || null;
    };
    
    // T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß cho ng∆∞·ªùi nh·∫≠n
    const fullAddress = selectedAddress 
      ? `${selectedAddress.addressDetail}, ${parseLocationValue(selectedAddress.ward)}, ${parseLocationValue(selectedAddress.district)}, ${parseLocationValue(selectedAddress.province)}`
      : [
          formData.address,
          parseLocationValue(formData.ward),
          parseLocationValue(formData.district),
          parseLocationValue(formData.province)
        ].filter(Boolean).join(', ');
    
    // L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ chi ti·∫øt v·ªõi ID
    let provinceId: number | null = null;
    let districtId: number | null = null;
    let wardCode: string = '';

    if (selectedAddress) {
      // N·∫øu ch·ªçn ƒë·ªãa ch·ªâ c√≥ s·∫µn, l·∫•y t·ª´ selectedAddress
      // C·∫ßn parse t·ª´ selectedAddress n·∫øu c√≥ th√¥ng tin ID
      const addressParts = selectedAddress.province?.split('|') || [];
      const districtParts = selectedAddress.district?.split('|') || [];
      const wardParts = selectedAddress.ward?.split('|') || [];
      
      provinceId = addressParts.length > 0 ? parseInt(addressParts[0]) || null : null;
      districtId = districtParts.length > 0 ? parseInt(districtParts[0]) || null : null;
      wardCode = wardParts.length > 0 ? wardParts[0] : '';
    } else {
      // N·∫øu nh·∫≠p ƒë·ªãa ch·ªâ m·ªõi, parse t·ª´ formData
      provinceId = parseLocationId(formData.province);
      districtId = parseLocationId(formData.district);
      wardCode = formData.ward ? formData.ward.split('|')[0] : '';
    }
    
    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi nh·∫≠n v√†o context (ƒë√¢y l√† th√¥ng tin quan tr·ªçng cho API)
    const receiverInfo = {
      name: receiverName.trim(),
      phone: receiverPhone.trim(),
      address: fullAddress,
    };
    updateReceiverInfo(receiverInfo);

    // C·∫≠p nh·∫≠t th√¥ng tin receiver v√†o Redux commonInfo v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    // Ch·ªâ l∆∞u khi c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ
    if (provinceId && districtId && wardCode) {
      const receiverData = {
        name: receiverName.trim(),
        phone: receiverPhone.trim(),
        address: fullAddress,
        provinceId: provinceId,
        districtId: districtId,
        wardCode: wardCode
      };
      
      dispatch(setCommonInfo({
        receiver: receiverData
      }));
      
      console.log('üè† Updated receiver info to Redux:', receiverData);
    } else {
      // N·∫øu ch∆∞a c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ, ch·ªâ l∆∞u th√¥ng tin c∆° b·∫£n
      const basicReceiverData = {
        name: receiverName.trim(),
        phone: receiverPhone.trim(),
        address: fullAddress,
        provinceId: 204, // Default fallback
        districtId: 1536, // Default fallback  
        wardCode: wardCode || '480121' // Default fallback
      };
      
      dispatch(setCommonInfo({
        receiver: basicReceiverData
      }));
      
      console.log('üè† Updated basic receiver info to Redux (using defaults):', basicReceiverData);
    }
    
    // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng (th√¥ng tin chi ti·∫øt)
    const shippingAddress = {
      receiverName: formData.receiverName || formData.fullName,
      receiverPhone: formData.receiverPhone || formData.phoneNumber,
      
      ...(selectedAddress 
        ? {
            addressDetail: selectedAddress.addressDetail,
            // Gi·ªØ nguy√™n c·∫•u tr√∫c code|name ƒë·ªÉ component recipient-Info c√≥ th·ªÉ parse
            ward: selectedAddress.ward,
            district: selectedAddress.district,
            province: selectedAddress.province,
            address: fullAddress
          }
        : {
            addressDetail: formData.address || '',
            // ƒê√£ parse t·ª´ code|name sang name trong parseLocationValue
            ward: formData.ward, // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng code|name
            district: formData.district, // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng code|name
            province: formData.province, // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng code|name
            address: fullAddress
          })
    };
    
    // Update shipping address
    
    // Ensure addressDetail is not empty
    if (!shippingAddress.addressDetail && shippingAddress.address) {
      shippingAddress.addressDetail = shippingAddress.address;
    }
    
    updateShippingAddress(shippingAddress);
    
    // L∆∞u th√¥ng tin v√†o localStorage n·∫øu ƒë∆∞·ª£c ch·ªçn
    if (formData.saveInfo) {
      localStorage.setItem('checkoutInfo', JSON.stringify({
        fullName: formData.fullName,
        email: formData.email,
        phoneNumber: formData.phoneNumber,
        receiverName: formData.receiverName,
        receiverPhone: formData.receiverPhone,
        province: formData.province,
        district: formData.district,
        ward: formData.ward,
        address: formData.address,
      }));
    }
    
    onNext();
  };

  // Gi·∫£ s·ª≠ user ƒë√£ ƒëƒÉng nh·∫≠p - trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ context auth
  const isLoggedIn = true;

  return (
    <div className="space-y-4">
      <form id="checkout-form" onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>
        <CustomerInfo
          onDataChange={handleCustomerInfoChange}
          isLoggedIn={isLoggedIn}
        />
        
        <div className="mt-4">
          <ShippingAddress
            formData={formData}
            handleChange={handleChange}
            onSelectExistingAddress={handleSelectExistingAddress}
          />
        </div>
        
        {/* <div className="mt-4">
          <ShippingType
            deliveryMethod={formData.deliveryMethod}
            handleRadioChange={handleRadioChange}
          />
        </div> */}
      </form>
    </div>
  );
}
