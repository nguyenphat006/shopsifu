generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id                   String                @id @db.VarChar(10)
  name                 String                @db.VarChar(500)
  createdById          String?
  updatedById          String?
  deletedAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedById          String?
  brandTranslations    BrandTranslation[]
  categoryTranslations CategoryTranslation[]
  createdBy            User?                 @relation("LanguageCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy            User?                 @relation("LanguageDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy            User?                 @relation("LanguageUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  productTranslations  ProductTranslation[]
  userTranslations     UserTranslation[]

  @@index([deletedAt])
}

model User {
  id                          String                @id @default(uuid())
  email                       String                @unique
  name                        String                @db.VarChar(500)
  password                    String                @db.VarChar(500)
  phoneNumber                 String?               @unique @db.VarChar(50)
  avatar                      String?               @db.VarChar(1000)
  totpSecret                  String?               @db.VarChar(1000)
  status                      UserStatus            @default(INACTIVE)
  roleId                      String
  createdById                 String?
  updatedById                 String?
  deletedAt                   DateTime?
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  deletedById                 String?
  dateOfBirth                 DateTime?
  createdBrands               Brand[]               @relation("BrandCreatedBy")
  deletedBrands               Brand[]               @relation("BrandDeletedBy")
  updatedBrands               Brand[]               @relation("BrandUpdatedBy")
  createdBrandTranslations    BrandTranslation[]    @relation("BrandTranslationCreatedBy")
  deletedBrandTranslations    BrandTranslation[]    @relation("BrandTranslationDeletedBy")
  updatedBrandTranslations    BrandTranslation[]    @relation("BrandTranslationUpdatedBy")
  carts                       CartItem[]
  createdCategories           Category[]            @relation("CategoryCreatedBy")
  deletedCategories           Category[]            @relation("CategoryDeletedBy")
  updatedCategories           Category[]            @relation("CategoryUpdatedBy")
  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  deletedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationDeletedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  devices                     Device[]
  createdDiscounts            Discount[]            @relation("DiscountCreatedBy")
  deletedDiscounts            Discount[]            @relation("DiscountDeletedBy")
  shopDiscounts               Discount[]            @relation("ShopDiscounts")
  updatedDiscounts            Discount[]            @relation("DiscountUpdatedBy")
  createdLanguages            Language[]            @relation("LanguageCreatedBy")
  deletedLanguages            Language[]            @relation("LanguageDeletedBy")
  updatedLanguages            Language[]            @relation("LanguageUpdatedBy")
  sentMessages                Message[]             @relation("FromUser")
  receivedMessages            Message[]             @relation("ToUser")
  createdOrders               Order[]               @relation("OrderCreatedBy")
  deletedOrders               Order[]               @relation("OrderDeletedBy")
  soldOrders                  Order[]               @relation("Shop")
  updatedOrders               Order[]               @relation("OrderUpdatedBy")
  orders                      Order[]
  createdPermissions          Permission[]          @relation("PermissionCreatedBy")
  deletedPermissions          Permission[]          @relation("PermissionDeletedBy")
  updatedPermissions          Permission[]          @relation("PermissionUpdatedBy")
  createdProducts             Product[]             @relation("ProductCreatedBy")
  deletedProducts             Product[]             @relation("ProductDeletedBy")
  updatedProducts             Product[]             @relation("ProductUpdatedBy")
  createdProductTranslations  ProductTranslation[]  @relation("ProductTranslationCreatedBy")
  deletedProductTranslations  ProductTranslation[]  @relation("ProductTranslationDeletedBy")
  updatedProductTranslations  ProductTranslation[]  @relation("ProductTranslationUpdatedBy")
  refreshTokens               RefreshToken[]
  reviews                     Review[]
  createdRoles                Role[]                @relation("RoleCreatedBy")
  deletedRoles                Role[]                @relation("RoleDeletedBy")
  updatedRoles                Role[]                @relation("RoleUpdatedBy")
  createdSKUS                 SKU[]                 @relation("SKUCreatedBy")
  deletedSKUS                 SKU[]                 @relation("SKUDeletedBy")
  updatedSKUS                 SKU[]                 @relation("SKUUpdatedBy")
  createdBy                   User?                 @relation("CreatorUsers", fields: [createdById], references: [id], onUpdate: NoAction)
  createdUsers                User[]                @relation("CreatorUsers")
  deletedBy                   User?                 @relation("DeletorUsers", fields: [deletedById], references: [id], onUpdate: NoAction)
  deletedUsers                User[]                @relation("DeletorUsers")
  role                        Role                  @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy                   User?                 @relation("UpdatorUsers", fields: [updatedById], references: [id], onUpdate: NoAction)
  updatedUsers                User[]                @relation("UpdatorUsers")
  UserAddress                 UserAddress[]
  createdUserTranslations     UserTranslation[]     @relation("UserTranslationCreatedBy")
  deletedUserTranslations     UserTranslation[]     @relation("UserTranslationDeletedBy")
  updatedUserTranslations     UserTranslation[]     @relation("UserTranslationUpdatedBy")
  userTranslations            UserTranslation[]     @relation("User")
  webSockets                  Websocket[]

  @@index([deletedAt])
  @@index([email, phoneNumber, status, deletedAt], map: "idx_user_email_phone_status")
}

model UserTranslation {
  id          String    @id @default(uuid())
  userId      String
  languageId  String
  address     String?   @db.VarChar(500)
  description String?
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedById String?
  createdBy   User?     @relation("UserTranslationCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?     @relation("UserTranslationDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?     @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User      @relation("User", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deletedAt])
}

model VerificationCode {
  id        String               @id @default(uuid())
  email     String               @db.VarChar(500)
  code      String               @db.VarChar(50)
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())

  @@unique([email, type])
  @@index([expiresAt])
}

model Device {
  id            String         @id @default(uuid())
  userId        String
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  refreshTokens RefreshToken[]

  @@index([userId])
  @@index([isActive])
  @@index([lastActive])
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    String
  deviceId  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt])
}

model Permission {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedById String?
  module      String     @default("") @db.VarChar(500)
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  roles       Role[]     @relation("PermissionToRole")

  @@index([deletedAt])
}

model Role {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedById String?
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?        @relation("RoleDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  users       User[]
  permissions Permission[] @relation("PermissionToRole")

  @@index([deletedAt])
}

model SKU {
  id                  String               @id @default(uuid())
  value               String
  price               Float
  stock               Int
  productId           String
  createdById         String
  updatedById         String?
  deletedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedById         String?
  image               String
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]
  createdBy           User                 @relation("SKUCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deletedBy           User?                @relation("SKUDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy           User?                @relation("SKUUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@index([deletedAt])
  @@index([productId])
  @@index([price, stock, deletedAt], map: "idx_sku_price_stock")
}

model Product {
  id                  String               @id @default(uuid())
  brandId             String
  images              String[]
  createdById         String
  updatedById         String?
  deletedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedById         String?
  basePrice           Float
  name                String
  publishedAt         DateTime?
  /// [Variants]
  variants            Json
  virtualPrice        Float
  description         String               @default("")
  discountId          String?
  /// [ProductSpecifications]
  specifications      Json?
  brand               Brand                @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy           User                 @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deletedBy           User?                @relation("ProductDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  Discount            Discount?            @relation(fields: [discountId], references: [id])
  updatedBy           User?                @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  productSKUSnapshots ProductSKUSnapshot[]
  productTranslations ProductTranslation[]
  reviews             Review[]
  skus                SKU[]
  categories          Category[]           @relation("CategoryToProduct")
  orders              Order[]              @relation("OrderToProduct")

  @@index([deletedAt])
  @@index([brandId])
  @@index([createdById])
  @@index([publishedAt])
  @@index([publishedAt, deletedAt])
  @@index([name, basePrice, virtualPrice, publishedAt, deletedAt], map: "idx_product_search_optimized")
}

model ProductSKUSnapshot {
  id                  String   @id @default(uuid())
  productName         String   @db.VarChar(500)
  skuValue            String   @db.VarChar(500)
  skuId               String?
  orderId             String?
  createdAt           DateTime @default(now())
  image               String
  productId           String?
  /// [ProductTranslations]
  productTranslations Json
  quantity            Int
  skuPrice            Float
  updatedAt           DateTime @updatedAt
  order               Order?   @relation(fields: [orderId], references: [id], onUpdate: NoAction)
  product             Product? @relation(fields: [productId], references: [id], onUpdate: NoAction)
  sku                 SKU?     @relation(fields: [skuId], references: [id], onUpdate: NoAction)

  @@index([orderId])
}

model ProductTranslation {
  id          String    @id @default(uuid())
  productId   String
  languageId  String
  name        String
  description String
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedById String?
  createdBy   User?     @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?     @relation("ProductTranslationDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?     @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@index([deletedAt])
  @@index([productId])
}

model Category {
  id                   String                @id @default(uuid())
  parentCategoryId     String?
  createdById          String?
  updatedById          String?
  deletedAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedById          String?
  logo                 String?               @db.VarChar(1000)
  name                 String                @db.VarChar(500)
  discountId           String?
  createdBy            User?                 @relation("CategoryCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy            User?                 @relation("CategoryDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  Discount             Discount?             @relation(fields: [discountId], references: [id])
  parentCategory       Category?             @relation("ParentCategoryCategories", fields: [parentCategoryId], references: [id], onUpdate: NoAction)
  childrenCategories   Category[]            @relation("ParentCategoryCategories")
  updatedBy            User?                 @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  categoryTranslations CategoryTranslation[]
  products             Product[]             @relation("CategoryToProduct")

  @@index([deletedAt])
}

model CategoryTranslation {
  id          String    @id @default(uuid())
  categoryId  String
  languageId  String
  name        String    @db.VarChar(500)
  description String
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedById String?
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy   User?     @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?     @relation("CategoryTranslationDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?     @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@index([deletedAt])
  @@index([categoryId])
  @@index([languageId])
}

model Brand {
  id                String             @id @default(uuid())
  logo              String             @db.VarChar(1000)
  createdById       String?
  updatedById       String?
  deletedAt         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedById       String?
  name              String             @db.VarChar(500)
  createdBy         User?              @relation("BrandCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy         User?              @relation("BrandDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy         User?              @relation("BrandUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  brandTranslations BrandTranslation[]
  products          Product[]
  discount          Discount?          @relation(fields: [discountId], references: [id])
  discountId        String?

  @@index([deletedAt])
}

model BrandTranslation {
  id          String    @id @default(uuid())
  brandId     String
  languageId  String
  name        String    @db.VarChar(500)
  description String
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedById String?
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy   User?     @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?     @relation("BrandTranslationDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?     @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@index([deletedAt])
  @@index([brandId])
  @@index([languageId])
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  skuId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sku       SKU      @relation(fields: [skuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, skuId])
  @@index([userId])
  @@index([skuId])
}

model DiscountSnapshot {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(500)
  description       String?
  value             Int
  code              String            @db.VarChar(100)
  maxDiscountValue  Int?
  discountAmount    Int
  minOrderValue     Int
  targetInfo        Json?
  discountId        String?
  orderId           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  discountApplyType DiscountApplyType
  discountType      DiscountType
  displayType       DisplayType
  isPlatform        Boolean
  voucherType       VoucherType
  discount          Discount?         @relation(fields: [discountId], references: [id], onUpdate: NoAction)
  order             Order?            @relation(fields: [orderId], references: [id], onUpdate: NoAction)

  @@index([orderId])
  @@index([discountId])
}

model Discount {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(500)
  description       String?            @default("")
  value             Int
  code              String             @unique @db.VarChar(100)
  startDate         DateTime
  endDate           DateTime
  usesCount         Int                @default(0)
  usersUsed         String[]
  maxUsesPerUser    Int                @default(0)
  minOrderValue     Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String?
  deletedAt         DateTime?
  deletedById       String?
  updatedById       String?
  maxUses           Int                @default(0)
  shopId            String?
  maxDiscountValue  Int?
  displayType       DisplayType        @default(PUBLIC)
  voucherType       VoucherType        @default(SHOP)
  isPlatform        Boolean            @default(false)
  discountApplyType DiscountApplyType  @default(ALL)
  discountStatus    DiscountStatus     @default(DRAFT)
  discountType      DiscountType       @default(FIX_AMOUNT)
  brands            Brand[]
  categories        Category[]
  createdBy         User?              @relation("DiscountCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy         User?              @relation("DiscountDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  shop              User?              @relation("ShopDiscounts", fields: [shopId], references: [id], onUpdate: NoAction)
  updatedBy         User?              @relation("DiscountUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  discountSnapshots DiscountSnapshot[]
  products          Product[]

  @@index([deletedAt])
  @@index([discountStatus, deletedAt])
  @@index([startDate, endDate])
  @@index([code])
  @@index([shopId])
  @@index([createdById])
}

model Order {
  id          String               @id @default(uuid())
  userId      String
  status      OrderStatus
  createdById String?
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedById String?
  /// [Receiver]
  receiver    Json
  shopId      String?
  paymentId   Int
  discounts   DiscountSnapshot[]
  createdBy   User?                @relation("OrderCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?                @relation("OrderDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  payment     Payment              @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shop        User?                @relation("Shop", fields: [shopId], references: [id], onUpdate: NoAction)
  updatedBy   User?                @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items       ProductSKUSnapshot[]
  reviews     Review[]
  products    Product[]            @relation("OrderToProduct")
  shipping    OrderShipping?

  @@index([deletedAt])
  @@index([status, deletedAt])
  @@index([userId])
  @@index([shopId])
  @@index([createdAt])
  @@index([userId, status])
  @@index([userId, status, createdAt, deletedAt], map: "idx_order_user_status_date")
}

model Payment {
  id        Int           @id @default(autoincrement())
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  orders    Order[]

  @@index([status])
  @@index([createdAt])
}

enum OrderShippingStatus {
  DRAFT
  ENQUEUED
  CREATED
  FAILED
  CANCELLED
}

model OrderShipping {
  id                   String               @id @default(uuid())
  orderId              String               @unique
  orderCode            String?              @unique
  serviceId            Int?
  serviceTypeId        Int?
  configFeeId          String?
  extraCostId          String?
  weight               Int?
  length               Int?
  width                Int?
  height               Int?
  shippingFee          Int?
  codAmount            Int?
  expectedDeliveryTime DateTime?
  trackingUrl          String?
  status               OrderShippingStatus?
  attempts             Int                  @default(0)
  lastError            String?
  // from
  fromAddress          String?
  fromName             String?
  fromPhone            String?
  fromProvinceName     String?
  fromDistrictName     String?
  fromWardName         String?
  fromDistrictId       Int?
  fromWardCode         String?
  // to
  toAddress            String?
  toName               String?
  toPhone              String?
  toDistrictId         Int?
  toWardCode           String?
  note                 String?
  requiredNote         String?
  pickShift            Json?
  createdAt            DateTime             @default(now())
  lastUpdatedAt        DateTime             @updatedAt
  order                Order                @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([status])
}

model Websocket {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Review {
  id          String        @id @default(uuid())
  content     String
  rating      Int
  productId   String
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderId     String
  updateCount Int           @default(0)
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product     Product       @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medias      ReviewMedia[]

  @@unique([orderId, productId])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@index([productId, rating, createdAt], map: "idx_review_product_rating_date")
}

model ReviewMedia {
  id        String    @id @default(uuid())
  url       String    @db.VarChar(1000)
  type      MediaType
  reviewId  String
  createdAt DateTime  @default(now())
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Message {
  id         String    @id @default(uuid())
  fromUserId String
  toUserId   String
  content    String
  readAt     DateTime?
  createdAt  DateTime  @default(now())
  fromUser   User      @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUser     User      @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fromUserId])
  @@index([toUserId])
  @@index([createdAt])
}

model Address {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(500)
  recipient   String? @db.VarChar(500)
  phoneNumber String? @db.VarChar(50)
  province    String  @db.VarChar(200)
  district    String  @db.VarChar(200)
  ward        String  @db.VarChar(200)

  // GHN ID fields for API integration
  provinceId Int? // GHN ProvinceID
  districtId Int? // GHN DistrictID
  wardCode   String? @db.VarChar(20) // GHN WardCode

  street      String        @db.VarChar(500)
  addressType AddressType   @default(HOME)
  createdById String
  updatedById String?
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedById String?
  userAddress UserAddress[]
}

model UserAddress {
  id        String   @id @default(uuid())
  userId    String
  addressId String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, addressId])
  @@index([userId])
  @@index([addressId])
}

model PaymentTransaction {
  id                 String   @id @default(uuid())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String?  @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?
  referenceNumber    String?  @db.VarChar(255)
  body               String?
  createdAt          DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PACKAGING
  PICKUPED
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum MediaType {
  IMAGE
  VIDEO
}

enum DiscountType {
  FIX_AMOUNT
  PERCENTAGE
}

enum DiscountStatus {
  DRAFT
  INACTIVE
  ACTIVE
  EXPIRED
}

enum DiscountApplyType {
  ALL
  SPECIFIC
}

enum VoucherType {
  SHOP
  PRODUCT
  PLATFORM
  CATEGORY
  BRAND
}

enum DisplayType {
  PUBLIC
  PRIVATE
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}
