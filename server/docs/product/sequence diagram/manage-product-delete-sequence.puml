@startuml Manage Product Delete Sequence
!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceArrowThickness 2
skinparam roundcorner 16

title Chi Tiết Luồng DELETE /manage-product/products/:productId

actor "ShopOwner/Admin" as U
participant "AccessTokenGuard" as AG
participant "ManageProductController" as MPC
participant "ManageProductService" as MPS
participant "ProductRepo" as PR
participant "SearchSyncService" as SSS
participant "I18nService" as IS
database "PostgreSQL (Prisma)" as DB
queue "BullMQ (search-sync)" as Q

U -> AG: Request + access_token
AG -> AG: Validate JWT, load user context
AG --> MPC: Forward với user
activate MPC

MPC -> MPS: delete({ productId, user })
activate MPS

MPS -> PR: findById(productId)
activate PR
PR -> DB: product.findUnique({ where: { id, deletedAt: null } })
DB --> PR: product | null
PR --> MPS: product | null
deactivate PR

alt product == null
  MPS -> MPS: throw NotFoundRecordException
  MPS --> MPC: 404 Not Found
  MPC --> U: 404 Not Found
  deactivate MPS
  deactivate MPC
  stop
end

MPS -> MPS: validatePrivilege(userIdRequest=user.userId,\n roleNameRequest=user.roleName,\n createdById=product.createdById)

alt Không hợp lệ
  MPS -> MPS: throw ForbiddenException
  MPS --> MPC: 403 Forbidden
  MPC --> U: 403 Forbidden
  deactivate MPS
  deactivate MPC
  stop
end

MPS -> PR: delete({ id=productId, deletedById=user.userId })
activate PR
PR -> DB: Parallel:
  product.update({ deletedAt=now, deletedById })
  productTranslation.updateMany({ productId, deletedAt=null -> set deletedAt, deletedById })
  sKU.updateMany({ productId, deletedAt=null -> set deletedAt, deletedById })
DB --> PR: ok
PR -> SSS: addSyncProductJob(productId, 'delete')
SSS -> Q: enqueue SYNC_PRODUCT_JOB
SSS --> PR: ok
PR --> MPS: deleted product (soft)
deactivate PR

MPS -> IS: t('product.product.success.DELETE_SUCCESS')
IS --> MPS: message
MPS --> MPC: { message }
deactivate MPS

MPC --> U: 200 OK + JSON
deactivate MPC

@enduml


