@startuml Product Module - Sequence Overview
!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60

title Mô-đun Sản Phẩm - Tổng Quan Luồng Xử Lý
note top : Hệ thống quản lý sản phẩm với SKU variants, đa ngôn ngữ và Elasticsearch sync

actor "Khách hàng" as Client
actor "Chủ shop" as ShopOwner
actor "Admin" as Admin
participant "ProductController" as PC
participant "ManageProductController" as MPC
participant "ProductTranslationController" as PTC
participant "ProductService" as PS
participant "ManageProductService" as MPS
participant "ProductTranslationService" as PTS
participant "ProductRepo" as PR
participant "ProductTranslationRepo" as PTR
participant "I18nService" as IS
participant "SearchSyncService" as SSS
participant "PrismaService" as PS
participant "AccessTokenGuard" as AG
database "PostgreSQL" as DB
database "Elasticsearch" as ES

== API Công Khai (Public Products) ==
Client -> PC: GET /products?page=1&limit=10&name=phone&brandIds=123,456
PC -> PS: list({query})
PS -> PR: list({page, limit, name, brandIds, categories, minPrice, maxPrice, languageId, isPublic: true})
PR -> PS: buildWhereClause()
note right
Logic Xây Dựng Query:
• WHERE deletedAt IS NULL
• WHERE publishedAt <= now (public only)
• Filter theo name, brandIds, categories
• Filter theo price range
• Include productTranslations theo language
end note
PR -> PS: product.findMany() với includes
PS -> DB: Thực thi query với filters
DB -> PS: Trả về products với translations
PS -> PR: Trả về {data, metadata}
PR -> PS: Trả về products data
PS -> IS: i18n.t('product.product.success.GET_SUCCESS')
IS -> PS: Trả về message đã localize
PS -> PC: Trả về response với data + metadata
PC -> Client: Trả về JSON response

Client -> PC: GET /products/:productId
PC -> PS: getDetail({productId})
PS -> PR: getDetail({productId, languageId, isPublic: true})
PR -> PS: product.findUnique() với includes
note right
Detail Includes:
• productTranslations theo language
• skus (active only)
• brand với translations
• categories với translations
end note
PS -> DB: Query product detail với relations
DB -> PS: Trả về product detail
PS -> PR: Trả về product data

alt Product được tìm thấy
    PR -> PS: Trả về product detail
    PS -> IS: i18n.t('product.product.success.GET_DETAIL_SUCCESS')
    IS -> PS: Trả về message đã localize
    PS -> PC: Trả về success response
    PC -> Client: Trả về 200 OK + JSON response

else Product không tồn tại
    PR -> PS: Throw NotFoundRecordException
    PS -> PC: Throw exception
    PC -> Client: Trả về 404 Not Found
end

== API Quản Lý (Management Products) ==
ShopOwner -> AG: Request với cookies
AG -> AG: Trích xuất access_token từ cookies
AG -> AG: Xác minh JWT token
AG -> AG: Tải quyền người dùng
AG -> MPC: Cho phép request với user context

ShopOwner -> MPC: POST /manage-product/products + {name, description, variants, skus, ...}
MPC -> MPS: create({data, user})
MPS -> MPS: validateSKUsWithVariants()
note right
SKU Validation Logic:
• Generate SKUs từ variants
• Validate số lượng SKU matches
• Validate SKU values
• Business rules validation
end note

alt SKU validation thành công
    MPS -> PR: create({createdById, data})
    PR -> PS: product.create() với relations
    note right
    Create Logic:
    • Create product với audit fields
    • Connect categories
    • Create SKUs với variants
    • Include all relations
    end note
    PS -> DB: INSERT product với relations
    DB -> PS: Trả về product created
    PS -> PR: Trả về product data
    PR -> SSS: addSyncProductJob(productId, 'create')
    SSS -> ES: Sync product to Elasticsearch
    ES -> SSS: Sync completed
    SSS -> PR: Trả về sync result
    PR -> MPS: Trả về created product
    MPS -> IS: i18n.t('product.product.success.CREATE_SUCCESS')
    IS -> MPS: Trả về message đã localize
    MPS -> MPC: Trả về success response
    MPC -> ShopOwner: Trả về 201 Created + JSON response

else SKU validation thất bại
    MPS -> MPC: Throw ValidationException
    MPC -> ShopOwner: Trả về 400 Bad Request
end

ShopOwner -> MPC: PUT /manage-product/products/:productId + {name, description, variants, skus, ...}
MPC -> MPS: update({productId, data, user})
MPS -> PR: findById(productId)
PR -> PS: product.findUnique()
PS -> DB: Query product theo ID
DB -> PS: Trả về product data
PS -> PR: Trả về product
PR -> MPS: Trả về product info
MPS -> MPS: validatePrivilege()
note right
Kiểm Soát Truy Cập:
• Admin: truy cập tất cả products
• Seller: chỉ truy cập của chính mình
• createdById validation
end note

alt Product tồn tại và có quyền truy cập
    MPS -> PR: update({id, updatedById, data})
    PR -> PR: handleSKUUpdates()
    note right
    SKU Update Logic:
    • Find existing SKUs
    • Identify SKUs to delete
    • Map SKUs to update
    • Create new SKUs
    • Transaction-based updates
    end note
    PR -> PS: $transaction() với SKU operations
    PS -> DB: UPDATE product và SKUs
    DB -> PS: Trả về updated product
    PS -> PR: Trả về updated data
    PR -> SSS: addSyncProductJob(productId, 'update')
    SSS -> ES: Sync product to Elasticsearch
    ES -> SSS: Sync completed
    SSS -> PR: Trả về sync result
    PR -> MPS: Trả về updated product
    MPS -> IS: i18n.t('product.product.success.UPDATE_SUCCESS')
    IS -> MPS: Trả về message đã localize
    MPS -> MPC: Trả về success response
    MPC -> ShopOwner: Trả về 200 OK + JSON response

else Product không tồn tại hoặc không có quyền
    MPS -> MPC: Throw NotFoundRecordException/ForbiddenException
    MPC -> ShopOwner: Trả về 404/403 Error
end

ShopOwner -> MPC: DELETE /manage-product/products/:productId
MPC -> MPS: delete({productId, user})
MPS -> PR: findById(productId)
PR -> PS: product.findUnique()
PS -> DB: Query product theo ID
DB -> PS: Trả về product data
PS -> PR: Trả về product
PR -> MPS: Trả về product info
MPS -> MPS: validatePrivilege()
MPS -> PR: delete({id, deletedById})
PR -> PS: product.update() soft delete
PS -> DB: UPDATE deletedAt field
DB -> PS: Trả về product marked deleted
PS -> PR: Trả về success
PR -> SSS: addSyncProductJob(productId, 'delete')
SSS -> ES: Remove product from Elasticsearch
ES -> SSS: Delete completed
SSS -> PR: Trả về sync result
PR -> MPS: Trả về success
MPS -> IS: i18n.t('product.product.success.DELETE_SUCCESS')
IS -> MPS: Trả về message đã localize
MPS -> MPC: Trả về success response
MPC -> ShopOwner: Trả về 200 OK + JSON response

== API Product Translation ==
ShopOwner -> PTC: POST /product-translations + {productId, languageId, name, description}
PTC -> PTS: create({data, user})
PTS -> PTR: create({createdById, data})
PTR -> PS: productTranslation.create()
PS -> DB: INSERT productTranslation
DB -> PS: Trả về translation created
PS -> PTR: Trả về translation data
PTR -> PTS: Trả về translation
PTS -> IS: i18n.t('product.productTranslation.success.CREATE_SUCCESS')
IS -> PTS: Trả về message đã localize
PTS -> PTC: Trả về success response
PTC -> ShopOwner: Trả về 201 Created + JSON response

alt Unique constraint violation
    PTR -> PS: productTranslation.create()
    PS -> DB: INSERT productTranslation
    DB -> PS: Unique constraint error
    PS -> PTR: Throw PrismaException
    PTR -> PTS: Throw exception
    PTS -> PTS: isUniqueConstraintPrismaError(error)
    PTS -> PTC: Throw ProductTranslationAlreadyExistsException
    PTC -> ShopOwner: Trả về 422 Unprocessable Entity
end

== Xử Lý Lỗi ==
alt Lỗi validation SKU
    MPS -> MPC: ValidationException
    MPC -> ShopOwner: Trả về 400 Bad Request

else Lỗi phân quyền
    MPS -> MPC: ForbiddenException
    MPC -> ShopOwner: Trả về 403 Forbidden

else Lỗi không tìm thấy
    MPS -> MPC: NotFoundRecordException
    MPC -> ShopOwner: Trả về 404 Not Found

else Lỗi unique constraint (translation)
    PTS -> PTC: ProductTranslationAlreadyExistsException
    PTC -> ShopOwner: Trả về 422 Unprocessable Entity

else Lỗi Elasticsearch sync
    SSS -> PR: Log sync error
    PR -> MPS: Continue without sync
    MPS -> MPC: Success response (sync failed)
    MPC -> ShopOwner: Trả về 200 OK + warning
end

== Đa Ngôn Ngữ ==
MPS -> IS: i18n.t('product.product.success.XXX')
IS -> MPS: Trả về message đã localize
MPS -> MPC: Phản hồi + Message đã localize
MPC -> ShopOwner: JSON Response với metadata đầy đủ

note bottom
**Đặc điểm chính của module Product:**
• Role-based access control (Admin/Seller)
• SKU management với variants và validation
• Multi-language support với ProductTranslation
• Elasticsearch sync cho search functionality
• Complex filtering và search capabilities
• Soft delete với audit fields
• Transaction-based SKU operations
• Comprehensive error handling
end note

@enduml
