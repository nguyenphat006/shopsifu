@startuml Permission Module - Sequence Overview
!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60

title Mô-đun Quyền - Tổng Quan Luồng Xử Lý
note top : Hệ thống quản lý quyền với cache management và role relationships

actor "Admin" as Admin
participant "PermissionController" as PC
participant "PermissionService" as PS
participant "PermissionRepo" as PR
participant "I18nService" as IS
participant "CacheManager" as CM
database "PostgreSQL" as DB
database "Redis" as RD

== GET /permissions - Lấy Danh Sách Quyền ==
Admin -> PC: GET /permissions?page=1&limit=10
PC -> PS: list(pagination)

PS -> PR: list(pagination)
PR -> PR: Tính toán pagination metadata
note right
Logic Phân Trang:
• skip = (page - 1) * limit
• take = limit
• Parallel queries: count + findMany
• Tính toán totalPages, hasNext, hasPrev
end note

PR -> DB: count() với WHERE deletedAt IS NULL
PR -> DB: findMany() với pagination
DB -> PR: Total count + permissions data
PR -> PS: Permissions với metadata
PS -> IS: i18n.t('permission.permission.success.GET_SUCCESS')
IS -> PS: Trả về message đã localize
PS -> PC: Phản hồi + Message đã localize
PC -> Admin: JSON với data + metadata

== GET /permissions/:id - Chi Tiết Quyền ==
Admin -> PC: GET /permissions/:permissionId
PC -> PS: findById(permissionId)

PS -> PR: findById(id)
PR -> DB: findUnique với WHERE deletedAt IS NULL
DB -> PR: Permission data
PR -> PS: Permission info

alt Permission tồn tại
    PS -> IS: i18n.t('permission.permission.success.GET_DETAIL_SUCCESS')
    IS -> PS: Trả về message đã localize
    PS -> PC: Success response
    PC -> Admin: JSON permission detail
else Permission không tồn tại
    PS -> PC: NotFoundRecordException
    PC -> Admin: 404 Not Found
end

== POST /permissions - Tạo Quyền Mới ==
Admin -> PC: POST /permissions + {name, path, method, module}
PC -> PS: create({data, user})

PS -> PS: Validate data với Zod schema
note right
Xác Thực Dữ Liệu:
• name: required string
• path: required string (API path)
• method: required string (HTTP method)
• module: required string
• Unique constraint: path + method
end note

PS -> PR: create({createdById, data})
PR -> DB: INSERT permission với audit fields
note right
Logic Tạo Mới:
• INSERT permission với createdById
• Audit trail: createdAt, createdById
• Validate unique constraint
end note
DB -> PR: Permission created
PR -> PS: New permission
PS -> IS: i18n.t('permission.permission.success.CREATE_SUCCESS')
IS -> PS: Trả về message đã localize
PS -> PC: Success response
PC -> Admin: 201 Created + JSON response

== PUT /permissions/:id - Cập Nhật Quyền ==
Admin -> PC: PUT /permissions/:permissionId + {data}
PC -> PS: update({id, data, user})

PS -> PR: update({id, updatedById, data})
PR -> DB: UPDATE permission với include roles
note right
Logic Cập Nhật:
• UPDATE permission với updatedById
• Include roles relationship
• Validate unique constraint
• Audit trail: updatedAt, updatedById
end note
DB -> PR: Updated permission với roles
PR -> PS: Updated data

alt Update successful
    PS -> PS: deleteCachedRole(roles)
    note right
    Quản Lý Cache:
    • Delete cached role data cho tất cả roles
    • Cache key: `role:${roleId}`
    • Parallel deletion với Promise.all
    • Ensure cache consistency
    end note
    PS -> CM: del(cacheKey) cho mỗi role
    CM -> RD: Delete cache entries
    RD -> CM: Cache cleared
    CM -> PS: Cache operation result
    PS -> IS: i18n.t('permission.permission.success.UPDATE_SUCCESS')
    IS -> PS: Trả về message đã localize
    PS -> PC: Success response
    PC -> Admin: 200 OK + JSON response
else Update failed
    PS -> PC: Error response
    PC -> Admin: 400/404 Error
end

== DELETE /permissions/:id - Xóa Quyền ==
Admin -> PC: DELETE /permissions/:permissionId
PC -> PS: delete({id, user})

PS -> PR: delete({id, deletedById})
PR -> DB: UPDATE deletedAt (soft delete)
note right
Logic Xóa:
• Soft delete: UPDATE deletedAt field
• Include roles relationship
• Audit trail: deletedAt, deletedById
• Support hard delete với isHard flag
end note
DB -> PR: Permission marked deleted với roles
PR -> PS: Deleted data

alt Delete successful
    PS -> PS: deleteCachedRole(roles)
    PS -> CM: del(cacheKey) cho mỗi role
    CM -> RD: Delete cache entries
    RD -> CM: Cache cleared
    CM -> PS: Cache operation result
    PS -> IS: i18n.t('permission.permission.success.DELETE_SUCCESS')
    IS -> PS: Trả về message đã localize
    PS -> PC: Success response
    PC -> Admin: 200 OK + message
else Delete failed
    PS -> PC: Error response
    PC -> Admin: 404 Not Found
end

== Xử Lý Lỗi & Validation ==
alt Lỗi unique constraint
    PS -> PC: PermissionAlreadyExistsException
    PC -> Admin: 422 Unprocessable Entity
    note right
    Lỗi Unique Constraint:
    • path + method combination đã tồn tại
    • Duplicate permission không được phép
    • Clear error message cho user
    end note

else Lỗi không tìm thấy
    PS -> PC: NotFoundRecordException
    PC -> Admin: 404 Not Found

else Lỗi validation dữ liệu
    PS -> PC: ValidationException
    PC -> Admin: 422 Unprocessable Entity

else Lỗi database
    PS -> PC: DatabaseException
    PC -> Admin: 500 Internal Server Error
end

== Cache Management ==
alt Cache operations
    PS -> CM: del(cacheKey)
    note right
    Thao Tác Cache:
    • Delete role cache khi permission thay đổi
    • Cache key format: `role:${roleId}`
    • Parallel deletion với Promise.all
    • Ensure data consistency
    end note
    CM -> RD: Delete cache entries
    RD -> CM: Cache operation result
    CM -> PS: Cache operation result
end

== Trả Kết Quả ==
PS -> IS: i18n.t('permission.permission.success.XXX')
IS -> PS: Trả về message đã localize
PS -> PC: Phản hồi + Message đã localize
PC -> Admin: JSON Response với metadata đầy đủ

note bottom
**Đặc điểm chính của module Permission:**
• CRUD operations đầy đủ với audit trail
• Soft delete pattern với hard delete option
• Cache management cho role relationships
• Unique constraint validation (path + method)
• Pagination với metadata đầy đủ
• Multi-language support
• Comprehensive error handling
• Role relationship management
end note

@enduml
