import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

/**
 * T·∫°o c√°c ng√¥n ng·ªØ c∆° b·∫£n n·∫øu ch∆∞a t·ªìn t·∫°i
 */
async function createLanguages(): Promise<void> {
  console.log('üî§ B·∫Øt ƒë·∫ßu t·∫°o ng√¥n ng·ªØ...')
  
  const languages = [
    {
      id: 'vi',
      name: 'Ti·∫øng Vi·ªát'
    },
    {
      id: 'en', 
      name: 'English'
    }
  ]

  for (const language of languages) {
    const existingLanguage = await prisma.language.findUnique({
      where: { id: language.id }
    })

    if (!existingLanguage) {
      await prisma.language.create({
        data: {
          id: language.id,
          name: language.name
        }
      })
      console.log(`‚úÖ ƒê√£ t·∫°o ng√¥n ng·ªØ: ${language.name} (${language.id})`)
    } else {
      console.log(`‚ÑπÔ∏è  Ng√¥n ng·ªØ ƒë√£ t·ªìn t·∫°i: ${language.name} (${language.id})`)
    }
  }

  console.log('‚úÖ Ho√†n th√†nh t·∫°o ng√¥n ng·ªØ!')
}

async function main(): Promise<void> {
  try {
    await prisma.$connect()
    await createLanguages()
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o ng√¥n ng·ªØ:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  main()
    .then(() => {
      console.log('üéâ Script t·∫°o ng√¥n ng·ªØ ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• Script t·∫°o ng√¥n ng·ªØ th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

export { createLanguages }






