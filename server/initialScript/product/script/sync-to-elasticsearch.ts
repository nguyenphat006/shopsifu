import { PrismaClient } from '@prisma/client'
import { NestFactory } from '@nestjs/core'
import { AppModule } from '../../../src/app.module'
import { SearchSyncService } from '../../../src/shared/services/search-sync.service'
import { Logger } from '@nestjs/common'
import { Client } from '@elastic/elasticsearch'

const prisma = new PrismaClient()
const logger = new Logger('SyncToElasticsearch')

// C·∫•u h√¨nh Elasticsearch
const ES_CONFIG = {
  node: 'http://103.147.186.84:9200',
  indexName: 'products'
}

/**
 * Clean Elasticsearch index tr∆∞·ªõc khi sync
 * X√≥a t·∫•t c·∫£ documents c≈© ƒë·ªÉ tr√°nh tr√πng l·∫∑p
 */
async function cleanElasticsearchIndex(): Promise<void> {
  const client = new Client({ node: ES_CONFIG.node })

  try {
    logger.log('üßπ B·∫Øt ƒë·∫ßu clean Elasticsearch index...')

    // Ki·ªÉm tra k·∫øt n·ªëi
    const info = await client.info()
    logger.log(`‚úÖ K·∫øt n·ªëi ES th√†nh c√¥ng - Version: ${info.version.number}`)

    // Ki·ªÉm tra index c√≥ t·ªìn t·∫°i kh√¥ng
    const indexExists = await client.indices.exists({ index: ES_CONFIG.indexName })

    if (indexExists) {
      // ƒê·∫øm documents hi·ªán t·∫°i
      const count = await client.count({ index: ES_CONFIG.indexName })
      logger.log(`üìä Index ${ES_CONFIG.indexName} c√≥ ${count.count} documents`)

      if (count.count > 0) {
        logger.log(`üóëÔ∏è  ƒêang x√≥a ${count.count} documents c≈©...`)

        // X√≥a t·∫•t c·∫£ documents
        const deleteResult = await client.deleteByQuery({
          index: ES_CONFIG.indexName,
          body: {
            query: {
              match_all: {}
            }
          }
        })

        logger.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deleted} documents`)

        // T√πy ch·ªçn x√≥a index ho√†n to√†n ƒë·ªÉ t·∫°o m·ªõi
        logger.log('üîÑ ƒêang x√≥a index ƒë·ªÉ t·∫°o m·ªõi...')
        await client.indices.delete({ index: ES_CONFIG.indexName })
        logger.log(`‚úÖ ƒê√£ x√≥a index ${ES_CONFIG.indexName}`)
      } else {
        logger.log(`‚úÖ Index ${ES_CONFIG.indexName} ƒë√£ tr·ªëng`)
      }
    } else {
      logger.log(`‚ÑπÔ∏è  Index ${ES_CONFIG.indexName} ch∆∞a t·ªìn t·∫°i`)
    }

    logger.log('üßπ Clean Elasticsearch ho√†n th√†nh!')
  } catch (error) {
    logger.error('‚ùå L·ªói khi clean Elasticsearch:', error)
    throw error
  } finally {
    await client.close()
  }
}

/**
 * Sync t·∫•t c·∫£ products ƒë√£ import l√™n Elasticsearch
 * S·ª≠ d·ª•ng c∆° ch·∫ø batch processing v√† NestJS application context
 */
async function syncAllProductsToElasticsearch(): Promise<void> {
  let app: any = null

  try {
    logger.log('üöÄ B·∫Øt ƒë·∫ßu sync t·∫•t c·∫£ products l√™n Elasticsearch...')

    // B∆∞·ªõc 1: Clean Elasticsearch tr∆∞·ªõc
    await cleanElasticsearchIndex()

    // B∆∞·ªõc 2: L·∫•y t·∫•t c·∫£ products ƒë√£ import (c√≥ createdById)
    const products = await prisma.product.findMany({
      where: {
        deletedAt: null,
        createdById: { not: undefined } // Ch·ªâ l·∫•y products ƒë∆∞·ª£c import
      },
      select: {
        id: true,
        name: true
      }
    })

    logger.log(`üì¶ T√¨m th·∫•y ${products.length} products c·∫ßn sync`)

    if (products.length === 0) {
      logger.warn('‚ö†Ô∏è Kh√¥ng c√≥ products n√†o ƒë·ªÉ sync')
      return
    }

    // B∆∞·ªõc 3: T·∫°o NestJS application context ƒë·ªÉ s·ª≠ d·ª•ng SearchSyncService
    logger.log('üîß Kh·ªüi t·∫°o NestJS application context...')
    app = await NestFactory.createApplicationContext(AppModule)
    const searchSyncService = app.get(SearchSyncService)

    // B∆∞·ªõc 4: Sync theo batch ƒë·ªÉ tr√°nh qu√° t·∫£i
    const batchSize = 100
    const batches = Array.from({ length: Math.ceil(products.length / batchSize) }, (_, i) =>
      products.slice(i * batchSize, (i + 1) * batchSize)
    )

    logger.log(`üì¶ S·∫Ω sync ${products.length} products trong ${batches.length} batches`)

    let successCount = 0
    let failCount = 0

    // Sync t·ª´ng batch
    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i]
      const productIds = batch.map((p) => p.id)

      logger.log(`üîÑ ƒêang sync batch ${i + 1}/${batches.length} v·ªõi ${batch.length} products...`)

      try {
        await searchSyncService.syncProductsBatchToES({
          productIds: productIds,
          action: 'create'
        })

        successCount += batch.length
        logger.log(`‚úÖ ƒê√£ sync th√†nh c√¥ng batch ${i + 1}/${batches.length}`)

        // Log t√™n c√°c products ƒë√£ sync
        batch.forEach((product) => {
          logger.log(`  ‚úÖ Queued sync for product: ${product.name}`)
        })
      } catch (error) {
        failCount += batch.length
        logger.error(`‚ùå L·ªói khi sync batch ${i + 1}/${batches.length}:`, error)
        // Ti·∫øp t·ª•c v·ªõi batch ti·∫øp theo thay v√¨ d·ª´ng to√†n b·ªô
      }
    }

    logger.log(`üéâ Sync completed! Success: ${successCount}, Failed: ${failCount}`)
  } catch (error) {
    logger.error('‚ùå Sync failed:', error)
    throw error
  } finally {
    // ƒê√≥ng NestJS application context
    if (app) {
      await app.close()
      logger.log('üîå ƒê√£ ƒë√≥ng NestJS application context')
    }

    await prisma.$disconnect()
    logger.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi database')
  }
}

// Ch·∫°y script
if (require.main === module) {
  syncAllProductsToElasticsearch()
    .then(() => {
      logger.log('‚úÖ Sync to Elasticsearch completed!')
      process.exit(0)
    })
    .catch((error) => {
      logger.error('‚ùå Sync to Elasticsearch failed:', error)
      process.exit(1)
    })
}

export { syncAllProductsToElasticsearch, cleanElasticsearchIndex }
