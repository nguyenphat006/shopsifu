#!/usr/bin/env node

import { PrismaClient } from '@prisma/client'
import { logger, CONFIG } from './import-utils'

// GHN API Configuration
const GHN_CONFIG = {
  BASE_URL: process.env.GHN_BASE_URL || process.env.APP_URL || 'https://api.shopsifu.live',
  ENDPOINTS: {
    PROVINCES: '/shipping/ghn/address/provinces',
    DISTRICTS: '/shipping/ghn/address/districts',
    WARDS: '/shipping/ghn/address/wards'
  },
  TIMEOUT: 30000,
  RETRY: {
    MAX_ATTEMPTS: 3,
    DELAY: 1000
  }
}

function buildGHNUrl(endpoint: string): string {
  return `${GHN_CONFIG.BASE_URL}${endpoint}`
}

function getEnvironment(): string {
  if (process.env.NODE_ENV) return process.env.NODE_ENV
  if (process.env.APP_ENVIRONMENT) return process.env.APP_ENVIRONMENT

  if (GHN_CONFIG.BASE_URL.includes('localhost') || GHN_CONFIG.BASE_URL.includes('127.0.0.1')) {
    return 'local'
  }
  if (GHN_CONFIG.BASE_URL.includes('shopsifu.live')) {
    return 'production'
  }
  if (GHN_CONFIG.BASE_URL.includes('staging') || GHN_CONFIG.BASE_URL.includes('dev')) {
    return 'staging'
  }

  return 'unknown'
}

// GHN API Interfaces
interface GHNProvince {
  ProvinceID: number
  ProvinceName: string
}

interface GHNDistrict {
  DistrictID: number
  DistrictName: string
  ProvinceID: number
}

interface GHNWard {
  WardCode: string
  WardName: string
  DistrictID: number
}

interface GHNAddress {
  province: string
  district: string
  ward: string
  provinceId: number
  districtId: number
  wardCode: string
  street: string
}

// Main import function
async function importFullAddressesFromGHN(
  users: Array<{ id: string; role: { name: string } }>,
  creatorUserId: string,
  tx: PrismaClient
): Promise<{ addressCount: number; userAddressCount: number }> {
  try {
    logger.log('üåè B·∫Øt ƒë·∫ßu import ƒë·ªãa ch·ªâ t·ª´ T·∫§T C·∫¢ 64 t·ªânh th√†nh GHN API...')

    // 1. L·∫•y t·∫•t c·∫£ provinces t·ª´ GHN API
    logger.log('üîÑ ƒêang l·∫•y danh s√°ch T·∫§T C·∫¢ t·ªânh/th√†nh t·ª´ GHN API...')
    const provincesUrl = buildGHNUrl(GHN_CONFIG.ENDPOINTS.PROVINCES)
    logger.log(`üåê G·ªçi API: ${provincesUrl}`)
    const provincesResponse = await fetch(provincesUrl)

    if (!provincesResponse.ok) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch t·ªânh/th√†nh: ${provincesResponse.statusText}`)
    }

    const provincesData = await provincesResponse.json()
    const provinces: GHNProvince[] = provincesData.data || []
    logger.log(`üìç T√¨m th·∫•y ${provinces.length} t·ªânh/th√†nh`)

    // L·ªçc b·ªè c√°c t·ªânh test/fake
    const realProvinces = provinces.filter(
      (p) =>
        !p.ProvinceName.toLowerCase().includes('test') &&
        !p.ProvinceName.toLowerCase().includes('alert') &&
        !p.ProvinceName.toLowerCase().includes('ngoc')
    )

    logger.log(`üéØ L·ªçc ƒë∆∞·ª£c ${realProvinces.length} t·ªânh th√†nh th·ª±c t·∫ø t·ª´ ${provinces.length} t·ªânh ban ƒë·∫ßu`)

    const allGhnAddresses: GHNAddress[] = []

    // 2. L·∫•y addresses t·ª´ T·∫§T C·∫¢ provinces th·ª±c t·∫ø
    for (let i = 0; i < realProvinces.length; i++) {
      const province = realProvinces[i]
      logger.log(
        `üîÑ [${i + 1}/${realProvinces.length}] ƒêang x·ª≠ l√Ω ${province.ProvinceName} (ID: ${province.ProvinceID})...`
      )

      try {
        // L·∫•y districts c·ªßa province n√†y
        const districtsUrl = buildGHNUrl(`${GHN_CONFIG.ENDPOINTS.DISTRICTS}?provinceId=${province.ProvinceID}`)
        const districtsResponse = await fetch(districtsUrl)

        if (!districtsResponse.ok) {
          logger.warn(`‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y districts cho ${province.ProvinceName}`)
          continue
        }

        const districtsData = await districtsResponse.json()
        const districts: GHNDistrict[] = districtsData.data || []

        if (districts.length === 0) {
          logger.warn(`‚ö†Ô∏è  ${province.ProvinceName} kh√¥ng c√≥ districts`)
          continue
        }

        logger.log(`  üìç ${province.ProvinceName}: ${districts.length} districts`)

        // L·∫•y m·ªôt s·ªë districts ƒë·∫°i di·ªán (t·ªëi ƒëa 10 districts/province)
        const selectedDistricts = districts.slice(0, Math.min(10, districts.length))

        for (const district of selectedDistricts) {
          try {
            // L·∫•y wards c·ªßa district n√†y
            const wardsUrl = buildGHNUrl(`${GHN_CONFIG.ENDPOINTS.WARDS}?districtId=${district.DistrictID}`)
            const wardsResponse = await fetch(wardsUrl)

            if (!wardsResponse.ok) {
              logger.warn(`‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y wards cho ${district.DistrictName}`)
              continue
            }

            const wardsData = await wardsResponse.json()
            const wards: GHNWard[] = wardsData.data || []

            if (wards.length === 0) {
              logger.warn(`‚ö†Ô∏è  ${district.DistrictName} kh√¥ng c√≥ wards`)
              continue
            }

            // L·∫•y m·ªôt s·ªë wards ƒë·∫°i di·ªán (t·ªëi ƒëa 5 wards/district)
            const selectedWards = wards.slice(0, Math.min(5, wards.length))

            for (const ward of selectedWards) {
              // T·∫°o nhi·ªÅu ƒë·ªãa ch·ªâ street kh√°c nhau cho m·ªói ward
              const streetVariations = [
                `ƒê∆∞·ªùng ${Math.floor(Math.random() * 100) + 1}`,
                `Ph·ªë ${Math.floor(Math.random() * 50) + 1}`,
                `Ng√µ ${Math.floor(Math.random() * 200) + 1}`,
                `S·ªë ${Math.floor(Math.random() * 500) + 1}`,
                `H·∫ªm ${Math.floor(Math.random() * 100) + 1}`
              ]

              for (const street of streetVariations) {
                allGhnAddresses.push({
                  province: province.ProvinceName,
                  district: district.DistrictName,
                  ward: ward.WardName,
                  provinceId: province.ProvinceID,
                  districtId: district.DistrictID,
                  wardCode: ward.WardCode,
                  street: street
                })
              }
            }

            // Th√™m delay nh·ªè ƒë·ªÉ tr√°nh rate limit
            await new Promise((resolve) => setTimeout(resolve, 50))
          } catch (error) {
            logger.warn(`‚ö†Ô∏è  L·ªói khi x·ª≠ l√Ω district ${district.DistrictName}: ${error.message}`)
          }
        }

        // Th√™m delay gi·ªØa c√°c provinces
        await new Promise((resolve) => setTimeout(resolve, 100))
      } catch (error) {
        logger.warn(`‚ö†Ô∏è  L·ªói khi x·ª≠ l√Ω province ${province.ProvinceName}: ${error.message}`)
      }
    }

    logger.log(`üéØ Thu th·∫≠p ƒë∆∞·ª£c ${allGhnAddresses.length} ƒë·ªãa ch·ªâ t·ª´ ${realProvinces.length} t·ªânh th√†nh th·ª±c t·∫ø`)

    if (allGhnAddresses.length === 0) {
      throw new Error('Kh√¥ng thu th·∫≠p ƒë∆∞·ª£c ƒë·ªãa ch·ªâ n√†o t·ª´ GHN API')
    }

    // 3. T·∫°o addresses cho users
    const addressesToCreate: Array<{
      name: string
      recipient?: string
      phoneNumber: string
      province: string
      district: string
      ward: string
      provinceId: number
      districtId: number
      wardCode: string
      street: string
      addressType: 'HOME' | 'OFFICE'
      createdById: string
      userId: string
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }> = []

    logger.log(`üîÑ ƒêang t·∫°o ƒë·ªãa ch·ªâ cho ${users.length} users...`)

    users.forEach((user, userIndex) => {
      // M·ªói user s·∫Ω c√≥ 2-3 ƒë·ªãa ch·ªâ t·ª´ c√°c t·ªânh kh√°c nhau
      const numAddresses = Math.floor(Math.random() * 2) + 2 // 2-3 ƒë·ªãa ch·ªâ

      for (let i = 0; i < numAddresses; i++) {
        const now = new Date()
        // Ch·ªçn ng·∫´u nhi√™n ƒë·ªãa ch·ªâ t·ª´ danh s√°ch ƒë√£ thu th·∫≠p
        const addressData = allGhnAddresses[Math.floor(Math.random() * allGhnAddresses.length)]

        if (user.role.name === 'SELLER') {
          // ƒê·ªãa ch·ªâ shop
          addressesToCreate.push({
            name: `Shop ${addressData.province} ${i + 1}`,
            recipient: `Shopsifu ${addressData.province}`,
            phoneNumber: '+84901234567',
            province: addressData.province,
            district: addressData.district,
            ward: addressData.ward,
            provinceId: addressData.provinceId,
            districtId: addressData.districtId,
            wardCode: addressData.wardCode,
            street: `${100 + i} ${addressData.street}`,
            addressType: 'OFFICE',
            createdById: creatorUserId,
            userId: user.id,
            isDefault: i === 0,
            createdAt: now,
            updatedAt: now
          })
        } else {
          // ƒê·ªãa ch·ªâ nh√†
          addressesToCreate.push({
            name: `Nh√† ${addressData.province} ${i + 1}`,
            recipient: `Ng∆∞·ªùi nh·∫≠n ${addressData.province} ${i + 1}`,
            phoneNumber:
              '0' +
              Math.floor(Math.random() * 1000000000)
                .toString()
                .padStart(9, '0'),
            province: addressData.province,
            district: addressData.district,
            ward: addressData.ward,
            provinceId: addressData.provinceId,
            districtId: addressData.districtId,
            wardCode: addressData.wardCode,
            street: `${i + 1} ${addressData.street}`,
            addressType: 'HOME',
            createdById: creatorUserId,
            userId: user.id,
            isDefault: i === 0,
            createdAt: now,
            updatedAt: now
          })
        }
      }

      // Log progress m·ªói 500 users
      if ((userIndex + 1) % 500 === 0) {
        logger.log(`üìä ƒê√£ x·ª≠ l√Ω ${userIndex + 1}/${users.length} users`)
      }
    })

    logger.log(`üì¶ T·∫°o ƒë∆∞·ª£c ${addressesToCreate.length} addresses ƒë·ªÉ import`)

    // 4. T·∫°o addresses trong database (batch processing)
    let addressCount = 0
    let userAddressCount = 0
    const copyBatchSize = CONFIG.COPY_BATCH_SIZE
    const copyChunks = Array.from({ length: Math.ceil(addressesToCreate.length / copyBatchSize) }, (_, i) =>
      addressesToCreate.slice(i * copyBatchSize, (i + 1) * copyBatchSize)
    )

    logger.log(`üîÑ B·∫Øt ƒë·∫ßu import ${copyChunks.length} batches v√†o database...`)

    for (let chunkIndex = 0; chunkIndex < copyChunks.length; chunkIndex++) {
      const chunk = copyChunks[chunkIndex]

      try {
        // T·∫°o addresses
        const addressData = chunk.map(({ userId, isDefault, ...data }) => data)
        await tx.address.createMany({ data: addressData })

        // L·∫•y addresses v·ª´a t·∫°o
        const createdAddressData = await tx.address.findMany({
          where: {
            name: { in: chunk.map((a) => a.name) },
            createdById: creatorUserId
          },
          select: { id: true, name: true }
        })

        // T·∫°o user-address relationships
        const userAddresses = chunk
          .map((address) => {
            const createdAddress = createdAddressData.find((a) => a.name === address.name)
            return createdAddress
              ? {
                  userId: address.userId,
                  addressId: createdAddress.id,
                  isDefault: address.isDefault,
                  createdAt: address.createdAt,
                  updatedAt: address.updatedAt
                }
              : null
          })
          .filter(
            (ua): ua is { userId: string; addressId: string; isDefault: boolean; createdAt: Date; updatedAt: Date } =>
              ua !== null
          )

        if (userAddresses.length) {
          await tx.userAddress.createMany({ data: userAddresses, skipDuplicates: true })
        }

        addressCount += chunk.length
        userAddressCount += userAddresses.length

        logger.log(`‚úÖ Batch ${chunkIndex + 1}/${copyChunks.length}: ${chunk.length} addresses`)
      } catch (error) {
        logger.error(`‚ùå L·ªói batch ${chunkIndex + 1}: ${error.message}`)
        throw error
      }
    }

    logger.log(
      `‚úÖ Imported ${addressCount} addresses v√† ${userAddressCount} user-address relationships t·ª´ ${realProvinces.length} t·ªânh th√†nh th·ª±c t·∫ø`
    )

    // 5. Th·ªëng k√™ theo t·ªânh th√†nh
    const provinceStats = await tx.address.groupBy({
      by: ['province'],
      _count: { province: true },
      where: { createdById: creatorUserId }
    })

    logger.log(`üìä Th·ªëng k√™ ƒë·ªãa ch·ªâ theo t·ªânh th√†nh:`)
    provinceStats.forEach((stat) => {
      logger.log(`  üìç ${stat.province}: ${stat._count.province} addresses`)
    })

    return { addressCount, userAddressCount }
  } catch (error) {
    logger.error(`‚ùå L·ªói khi import ƒë·ªãa ch·ªâ t·ª´ GHN API: ${error.message}`)
    throw error
  }
}

// Main execution function
async function main() {
  const prisma = new PrismaClient()

  try {
    logger.log('üåè B·∫Øt ƒë·∫ßu x√≥a v√† import l·∫°i ƒë·ªãa ch·ªâ t·ª´ T·∫§T C·∫¢ 64 t·ªânh th√†nh GHN API...')
    logger.log(`üîß Environment: ${getEnvironment()}`)
    logger.log(`üåê Base URL: ${GHN_CONFIG.BASE_URL}`)

    await prisma.$connect()

    // 1. X√≥a t·∫•t c·∫£ user-address relationships
    logger.log('üßπ B∆∞·ªõc 1: X√≥a user-address relationships...')
    const deletedUserAddresses = await prisma.userAddress.deleteMany({})
    logger.log(`‚úÖ ƒê√£ x√≥a ${deletedUserAddresses.count} user-address relationships`)

    // 2. X√≥a t·∫•t c·∫£ addresses
    logger.log('üßπ B∆∞·ªõc 2: X√≥a t·∫•t c·∫£ addresses...')
    const deletedAddresses = await prisma.address.deleteMany({})
    logger.log(`‚úÖ ƒê√£ x√≥a ${deletedAddresses.count} addresses`)

    // 3. L·∫•y danh s√°ch users
    logger.log('üîÑ B∆∞·ªõc 3: L·∫•y danh s√°ch users...')
    const users = await prisma.user.findMany({
      where: { deletedAt: null },
      select: {
        id: true,
        role: { select: { name: true } }
      }
    })
    logger.log(`üìä T√¨m th·∫•y ${users.length} users`)

    if (users.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y users n√†o ƒë·ªÉ t·∫°o ƒë·ªãa ch·ªâ')
    }

    // 4. L·∫•y creator user
    const creatorUser = await prisma.user.findFirst({
      where: {
        email: 'admin@shopsifu.com',
        deletedAt: null
      }
    })

    if (!creatorUser) {
      throw new Error('Kh√¥ng t√¨m th·∫•y creator user (admin@shopsifu.com)')
    }

    logger.log(`üë§ Creator: ${creatorUser.email} (${creatorUser.id})`)

    // 5. Import ƒë·ªãa ch·ªâ m·ªõi t·ª´ T·∫§T C·∫¢ t·ªânh th√†nh
    logger.log('üöÄ B∆∞·ªõc 4: Import ƒë·ªãa ch·ªâ m·ªõi t·ª´ T·∫§T C·∫¢ 64 t·ªânh th√†nh...')
    const result = await importFullAddressesFromGHN(users, creatorUser.id, prisma)

    logger.log(`üéâ Ho√†n th√†nh!`)
    logger.log(`üìä K·∫øt qu·∫£:`)
    logger.log(`  - Addresses m·ªõi: ${result.addressCount}`)
    logger.log(`  - User-address relationships: ${result.userAddressCount}`)

    // 6. Ki·ªÉm tra v√† th·ªëng k√™ cu·ªëi c√πng
    logger.log('üîç B∆∞·ªõc 5: Ki·ªÉm tra th·ªëng k√™ cu·ªëi c√πng...')

    const totalAddresses = await prisma.address.count()
    const totalUserAddresses = await prisma.userAddress.count()
    const totalDefaultAddresses = await prisma.userAddress.count({
      where: { isDefault: true }
    })
    const totalUsers = await prisma.user.count({
      where: { deletedAt: null }
    })
    const totalProvinces = await prisma.address.groupBy({
      by: ['province'],
      _count: { province: true }
    })

    logger.log(`üìà Th·ªëng k√™ cu·ªëi c√πng:`)
    logger.log(`  - T·ªïng users: ${totalUsers}`)
    logger.log(`  - T·ªïng addresses: ${totalAddresses}`)
    logger.log(`  - T·ªïng user-address relationships: ${totalUserAddresses}`)
    logger.log(`  - T·ªïng default addresses: ${totalDefaultAddresses}`)
    logger.log(`  - T·ªïng s·ªë t·ªânh th√†nh c√≥ ƒë·ªãa ch·ªâ: ${totalProvinces.length}`)

    // Hi·ªÉn th·ªã top 10 t·ªânh c√≥ nhi·ªÅu ƒë·ªãa ch·ªâ nh·∫•t
    const top10Provinces = totalProvinces.sort((a, b) => b._count.province - a._count.province).slice(0, 10)

    logger.log(`üèÜ Top 10 t·ªânh th√†nh c√≥ nhi·ªÅu ƒë·ªãa ch·ªâ nh·∫•t:`)
    top10Provinces.forEach((province, index) => {
      logger.log(`  ${index + 1}. ${province.province}: ${province._count.province} addresses`)
    })

    if (totalDefaultAddresses === totalUsers) {
      logger.log('‚úÖ T·∫•t c·∫£ users ƒë·ªÅu c√≥ ƒë·ªãa ch·ªâ default!')
    } else {
      logger.warn(`‚ö†Ô∏è  C√≥ ${totalUsers - totalDefaultAddresses} users ch∆∞a c√≥ ƒë·ªãa ch·ªâ default`)
    }

    logger.log('üéä Import ƒë·ªãa ch·ªâ t·ª´ T·∫§T C·∫¢ 64 t·ªânh th√†nh ho√†n th√†nh!')
  } catch (error) {
    logger.error(`‚ùå L·ªói: ${error.message}`)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Run if called directly
if (require.main === module) {
  main()
    .then(() => {
      logger.log('‚úÖ Script ho√†n th√†nh th√†nh c√¥ng')
      process.exit(0)
    })
    .catch((error) => {
      logger.error(`‚ùå Script th·∫•t b·∫°i: ${error.message}`)
      process.exit(1)
    })
}

export { importFullAddressesFromGHN, main }
